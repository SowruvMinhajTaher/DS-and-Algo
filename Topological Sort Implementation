from collections import defaultdict

class Graph():
    def __init__(self, vertices):
        self.v = vertices
        self.graph = defaultdict(list)
        
    
    def addEdge(self,u, v):
        self.graph[u].append(v)
        
    def topologicalSort(self):
        visited = [False]* self.v 
        stack = []
        for i in range(self.v):
            if visited[i] == False:
                self.topologicalSortUtil(i, visited, stack)
                
        print(stack[::-1])
    
    def topologicalSortUtil(self, vertex, visited, stack):
        visited[vertex] = True
        for i in self.graph[vertex]:
            if visited[i] == False:
                self.topologicalSortUtil(i, visited, stack)
                
        stack.append(vertex)

if __name__ == "__main__":
    g = Graph(6) #giving vertices count in total
    g.addEdge(5,2)
    g.addEdge(5,0)
    g.addEdge(4,0)
    g.addEdge(4,1)
    g.addEdge(2,3)
    g.addEdge(3,1)
    
    g.topologicalSort()
